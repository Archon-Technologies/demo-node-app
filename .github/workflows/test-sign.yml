name: Build, Sign, and Push

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '24 5 * * 5'
  workflow_dispatch:
    inputs:
      override_security_check:
        description: 'Override security check failures and proceed with build'
        type: boolean
        default: false

jobs:
  build:
    name: Build, Sign, and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write  # for OIDC keyless signing
      packages: write  # for pushing to GHCR
    if: |
      always() &&
      (needs.analyze.outputs.security_issues_found == 'false' ||
      github.event.inputs.override_security_check == 'true' ||
      needs.approval.result == 'skipped')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker image name (lowercase)
        id: image-name
        run: |
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "REPO_OWNER=$REPO_OWNER" >> $GITHUB_ENV

      - name: Build Docker image
        run: docker build . -t archon-demo-node-app:latest

      - name: Tag and push image
        run: |
          docker tag archon-demo-node-app:latest ghcr.io/${{ env.REPO_OWNER }}/archon-demo-node-app:latest
          docker push ghcr.io/${{ env.REPO_OWNER }}/archon-demo-node-app:latest

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.8.1

      # Import existing OpenSSL key into Cosign format
      - name: Write OpenSSL private key
        run: |
          printf '%s\n' "${{ secrets.PRIVATE_KEY_PEM }}" > opensslrsakey.pem

      - name: Import key pair into Cosign
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          printf '%s\n' "$COSIGN_PASSWORD" | cosign import-key-pair --key opensslrsakey.pem

      - name: Sign image with imported key
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          printf '%s\n' "$COSIGN_PASSWORD" | cosign sign --key import-cosign.key --yes ghcr.io/${{ env.REPO_OWNER }}/archon-demo-node-app:latest

      - name: Keyless sign via GitHub OIDC (optional)
        if: always()
        run: |
          cosign sign --yes ghcr.io/${{ env.REPO_OWNER }}/archon-demo-node-app:latest

