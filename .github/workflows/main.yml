name: Build, Sign, and Push

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '24 5 * * 5'
  workflow_dispatch:
    inputs:
      override_security_check:
        description: 'Override security check failures and proceed with build'
        type: boolean
        default: false

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read
      issues: write
    outputs:
      security_issues_found: ${{ steps.check-alerts.outputs.alerts_found }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - language: actions
            build-mode: none
          - language: javascript-typescript
            build-mode: none
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}

      - if: matrix.build-mode == 'manual'
        name: Run manual build steps
        run: |
          echo 'Custom build steps for manual mode go here.'
          exit 1

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

      - name: Check for security alerts
        id: check-alerts
        run: |
          # Install and authenticate GitHub CLI
          if ! command -v gh &> /dev/null; then
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg \
              | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" \
              | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update && sudo apt install -y gh
          fi
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          ALERTS=$(gh api repos/${{ github.repository }}/code-scanning/alerts --jq 'length')
          if [ "$ALERTS" -gt 0 ]; then
            echo "alerts_found=true" >> $GITHUB_OUTPUT
            gh label create security --color FF0000 --description "Security related issues" || true
            gh label create needs-review --color FFFF00 --description "Issues needing review" || true
            COMMIT_SHA=$(git rev-parse --short HEAD)
            ISSUE_TITLE="Security Issues Found in Build #${{ github.run_number }}"
            gh issue create \
              --title "$ISSUE_TITLE" \
              --body "CodeQL analysis found $ALERTS security issues in commit $COMMIT_SHA. Review: https://github.com/${{ github.repository }}/security/code-scanning" \
              --label "security,needs-review" || true
          else
            echo "alerts_found=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload CodeQL Database Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: codeql-${{ matrix.language }}-database
          path: /home/runner/work/_temp/codeql_databases/*.zip

  approval:
    name: Security Review
    needs: analyze
    runs-on: ubuntu-latest
    if: needs.analyze.outputs.security_issues_found == 'true' && github.event.inputs.override_security_check != 'true'
    steps:
      - name: Pending Approval
        run: |
          echo "Security issues were found. Manual review required."
          echo "Re-run this workflow with 'Override security check failures' to proceed."
          exit 1

  build:
    name: Build and Save Docker Image
    needs: [analyze, approval]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      packages: write
    if: |
      always() &&
      (needs.analyze.outputs.security_issues_found == 'false' ||
       github.event.inputs.override_security_check == 'true' ||
       needs.approval.result == 'skipped')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker image name (lowercase)
        id: image-name
        run: |
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "REPO_OWNER=$REPO_OWNER" >> $GITHUB_ENV

      - name: Build Docker image
        run: docker build . -t archon-demo-node-app:latest

      - name: Tag Docker image for GHCR
        run: |
          docker tag archon-demo-node-app:latest \
            ghcr.io/${{ env.REPO_OWNER }}/archon-demo-node-app:latest

      - name: Push to GitHub Container Registry
        run: |
          docker push ghcr.io/${{ env.REPO_OWNER }}/archon-demo-node-app:latest

      # ——— Cosign signing steps ———
      - name: Install cosign
        uses: sigstore/cosign-installer@v3.8.1

      - name: Write Cosign private key
        run: |
          echo "${{ secrets.PRIVATE_KEY_PEM }}" > opensslrsakey.pem
          chmod 600 opensslrsakey.pem

      - name: Import key‑pair for Cosign
        run: |
          cosign import-key-pair --key opensslrsakey.pem

      - name: Sign image with Cosign
        run: |
           echo ghcr.io/${{ env.REPO_OWNER }}/archon-demo-node-app:latest
           cosign sign \
                --key import-cosign.key \
                --yes \
                ghcr.io/${{ env.REPO_OWNER }}/archon-demo-node-app:latest
